// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoGallery_BackeEnd.Context;

#nullable disable

namespace PhotoGallery_BackEnd.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20231103170128_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("basePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("API_SectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("taskid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("uploadPathDataid");

                    b.ToTable("API_TaskModel");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("sectionUploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sectionUploadPathDataid");

                    b.ToTable("API_TaskOrderData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskReviewData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("extractData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractEndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractSta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isRunning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("task_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_TaskReviewData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("userAccessLevelid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("userAccessLevelid");

                    b.ToTable("API_Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            passwordHash = new byte[] { 187, 56, 16, 178, 176, 107, 131, 73, 37, 20, 143, 130, 151, 120, 96, 253, 166, 192, 198, 72, 167, 99, 86, 23, 189, 51, 141, 141, 125, 105, 210, 103, 234, 232, 13, 46, 185, 107, 182, 211, 254, 232, 137, 219, 240, 99, 80, 245, 25, 205, 216, 24, 151, 248, 78, 247, 47, 117, 137, 184, 55, 141, 110, 6 },
                            passwordSalt = new byte[] { 11, 185, 211, 99, 18, 32, 90, 89, 150, 221, 148, 36, 27, 97, 135, 174, 162, 221, 217, 13, 38, 138, 178, 132, 124, 67, 240, 123, 79, 153, 172, 209, 244, 100, 243, 86, 157, 112, 46, 248, 251, 239, 11, 74, 228, 203, 2, 143, 214, 18, 192, 116, 219, 109, 12, 251, 125, 94, 215, 168, 186, 151, 178, 216, 96, 180, 41, 57, 244, 93, 196, 8, 118, 20, 17, 174, 120, 220, 96, 236, 25, 59, 194, 80, 181, 229, 148, 232, 164, 45, 183, 162, 34, 210, 91, 157, 46, 242, 36, 1, 52, 17, 165, 30, 241, 55, 52, 39, 146, 192, 215, 82, 168, 126, 35, 21, 73, 38, 222, 93, 244, 144, 105, 43, 33, 151, 117, 233 },
                            userAccessLevelid = 1,
                            username = "prem"
                        },
                        new
                        {
                            id = 2,
                            passwordHash = new byte[] { 104, 29, 112, 254, 227, 107, 182, 114, 189, 42, 42, 145, 124, 15, 16, 139, 82, 87, 230, 78, 58, 26, 125, 248, 65, 253, 228, 48, 5, 254, 60, 145, 126, 47, 182, 118, 231, 104, 80, 252, 81, 143, 126, 166, 46, 105, 21, 161, 91, 171, 119, 239, 153, 92, 229, 165, 39, 106, 186, 168, 87, 67, 113, 93 },
                            passwordSalt = new byte[] { 132, 208, 104, 202, 17, 44, 220, 204, 146, 226, 170, 150, 112, 31, 124, 59, 29, 69, 162, 102, 130, 77, 154, 72, 212, 81, 4, 196, 131, 0, 70, 18, 15, 43, 46, 105, 53, 141, 124, 178, 169, 24, 187, 128, 229, 220, 144, 232, 44, 149, 51, 254, 152, 221, 228, 5, 116, 25, 213, 146, 41, 100, 147, 147, 9, 166, 199, 42, 139, 84, 109, 8, 38, 221, 2, 45, 17, 146, 211, 0, 250, 142, 122, 135, 131, 169, 229, 68, 25, 15, 4, 33, 235, 17, 242, 19, 155, 70, 191, 188, 237, 142, 203, 235, 80, 189, 60, 245, 17, 114, 37, 81, 91, 73, 204, 67, 201, 167, 121, 27, 211, 79, 191, 109, 145, 20, 24, 50 },
                            userAccessLevelid = 1,
                            username = "superadmin"
                        },
                        new
                        {
                            id = 3,
                            passwordHash = new byte[] { 164, 68, 134, 169, 150, 35, 156, 181, 240, 167, 243, 25, 176, 106, 125, 247, 246, 116, 99, 224, 52, 83, 219, 216, 94, 148, 90, 32, 145, 72, 205, 62, 204, 160, 56, 140, 164, 179, 12, 43, 135, 229, 85, 170, 244, 103, 221, 116, 171, 161, 187, 166, 85, 216, 62, 69, 90, 199, 31, 140, 119, 90, 157, 196 },
                            passwordSalt = new byte[] { 189, 234, 0, 25, 205, 50, 187, 50, 154, 131, 62, 99, 84, 172, 33, 106, 78, 188, 61, 163, 69, 62, 172, 179, 10, 82, 216, 179, 194, 2, 151, 66, 60, 20, 169, 164, 254, 164, 188, 18, 29, 119, 168, 49, 48, 112, 133, 147, 151, 33, 159, 56, 31, 122, 229, 79, 50, 135, 132, 193, 18, 224, 137, 106, 81, 221, 203, 155, 49, 196, 103, 99, 172, 210, 148, 162, 21, 85, 127, 16, 85, 125, 126, 154, 58, 29, 110, 233, 21, 200, 216, 162, 58, 115, 7, 101, 132, 31, 40, 39, 142, 94, 119, 127, 152, 94, 198, 225, 59, 21, 3, 47, 197, 147, 23, 16, 59, 177, 105, 84, 3, 159, 247, 184, 125, 246, 220, 23 },
                            userAccessLevelid = 2,
                            username = "admin"
                        },
                        new
                        {
                            id = 4,
                            passwordHash = new byte[] { 129, 92, 104, 187, 167, 125, 255, 94, 153, 171, 162, 72, 19, 33, 202, 39, 177, 104, 240, 203, 137, 0, 182, 227, 214, 120, 209, 75, 57, 16, 31, 96, 242, 0, 32, 197, 125, 201, 75, 215, 34, 95, 161, 147, 69, 62, 103, 148, 39, 117, 155, 16, 67, 188, 230, 204, 8, 85, 99, 138, 95, 116, 209, 221 },
                            passwordSalt = new byte[] { 66, 105, 212, 39, 122, 16, 211, 255, 253, 131, 242, 139, 126, 46, 216, 131, 15, 109, 26, 108, 138, 73, 85, 232, 81, 230, 65, 174, 0, 157, 2, 41, 69, 146, 236, 244, 143, 161, 151, 80, 124, 192, 154, 97, 35, 124, 85, 182, 106, 208, 114, 205, 147, 146, 160, 118, 183, 31, 3, 193, 133, 204, 116, 16, 158, 113, 12, 108, 207, 46, 211, 73, 96, 175, 255, 239, 121, 222, 30, 8, 136, 37, 57, 167, 149, 246, 119, 88, 23, 216, 139, 5, 37, 40, 243, 160, 230, 123, 20, 116, 68, 227, 132, 134, 158, 178, 56, 173, 145, 189, 132, 188, 113, 19, 28, 189, 25, 45, 23, 221, 210, 91, 95, 80, 229, 135, 163, 108 },
                            userAccessLevelid = 3,
                            username = "user"
                        },
                        new
                        {
                            id = 5,
                            passwordHash = new byte[] { 102, 104, 228, 137, 177, 113, 6, 182, 24, 124, 103, 242, 179, 129, 46, 67, 56, 121, 100, 236, 61, 75, 187, 114, 19, 129, 78, 45, 41, 107, 3, 239, 188, 124, 104, 110, 173, 58, 71, 30, 114, 147, 115, 167, 14, 106, 204, 12, 192, 58, 69, 23, 50, 234, 227, 154, 175, 196, 158, 107, 90, 175, 196, 60 },
                            passwordSalt = new byte[] { 58, 108, 43, 134, 152, 57, 214, 75, 107, 135, 3, 193, 71, 251, 91, 18, 35, 99, 81, 236, 58, 62, 153, 226, 184, 198, 71, 218, 228, 172, 212, 91, 129, 181, 136, 84, 50, 160, 183, 59, 67, 133, 16, 141, 9, 228, 140, 26, 157, 142, 144, 120, 135, 181, 218, 171, 236, 95, 51, 119, 34, 85, 120, 49, 199, 28, 255, 165, 214, 106, 237, 129, 111, 46, 202, 69, 83, 213, 144, 2, 182, 230, 143, 112, 24, 221, 150, 79, 94, 59, 232, 117, 22, 180, 97, 53, 209, 51, 1, 91, 220, 149, 181, 225, 42, 61, 245, 127, 159, 18, 29, 163, 156, 245, 249, 132, 88, 5, 214, 91, 31, 169, 202, 239, 214, 29, 197, 187 },
                            userAccessLevelid = 4,
                            username = "guest"
                        },
                        new
                        {
                            id = 6,
                            passwordHash = new byte[] { 114, 37, 197, 44, 42, 175, 76, 88, 196, 107, 248, 70, 50, 48, 90, 255, 205, 114, 91, 114, 60, 163, 203, 254, 227, 213, 158, 109, 53, 26, 49, 180, 205, 113, 149, 18, 242, 243, 16, 144, 238, 84, 201, 76, 83, 192, 31, 85, 212, 115, 20, 80, 64, 242, 23, 205, 7, 251, 155, 189, 138, 222, 200, 70 },
                            passwordSalt = new byte[] { 20, 180, 116, 78, 182, 77, 174, 241, 191, 99, 102, 20, 213, 177, 202, 169, 96, 100, 107, 191, 175, 209, 1, 138, 192, 238, 79, 121, 195, 81, 243, 195, 145, 125, 17, 111, 220, 139, 182, 56, 95, 107, 49, 196, 21, 36, 106, 14, 147, 166, 207, 11, 91, 66, 124, 248, 54, 3, 177, 116, 194, 161, 105, 189, 187, 187, 150, 104, 63, 212, 228, 228, 105, 92, 10, 131, 74, 152, 99, 211, 176, 43, 80, 30, 236, 233, 182, 191, 163, 18, 155, 204, 27, 91, 194, 128, 163, 62, 75, 85, 169, 22, 48, 43, 3, 59, 50, 22, 63, 212, 131, 123, 175, 100, 26, 36, 132, 229, 46, 159, 206, 153, 32, 110, 179, 88, 48, 217 },
                            userAccessLevelid = 99,
                            username = "unknow"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accessLevel")
                        .HasColumnType("int");

                    b.Property<string>("accessLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_UserAccessLevel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            accessLevel = 1,
                            accessLevelName = "SuperAdmin"
                        },
                        new
                        {
                            id = 2,
                            accessLevel = 2,
                            accessLevelName = "Admin"
                        },
                        new
                        {
                            id = 3,
                            accessLevel = 3,
                            accessLevelName = "User"
                        },
                        new
                        {
                            id = 4,
                            accessLevel = 4,
                            accessLevelName = "Guest"
                        },
                        new
                        {
                            id = 99,
                            accessLevel = 99,
                            accessLevelName = "Unknown"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "uploadPathData")
                        .WithMany()
                        .HasForeignKey("uploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("uploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "sectionUploadPathData")
                        .WithMany()
                        .HasForeignKey("sectionUploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", "userAccessLevels")
                        .WithMany()
                        .HasForeignKey("userAccessLevelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccessLevels");
                });
#pragma warning restore 612, 618
        }
    }
}

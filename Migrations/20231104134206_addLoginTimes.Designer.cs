// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoGallery_BackeEnd.Context;

#nullable disable

namespace PhotoGallery_BackEnd.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20231104134206_addLoginTimes")]
    partial class addLoginTimes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("basePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("API_SectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("taskid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("uploadPathDataid");

                    b.ToTable("API_TaskModel");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("sectionUploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sectionUploadPathDataid");

                    b.ToTable("API_TaskOrderData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskReviewData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("extractData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractEndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractSta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isRunning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("task_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_TaskReviewData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.LoginTimming", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("expireToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("lastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_LoginTimming");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("userAccessLevelid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("userAccessLevelid");

                    b.ToTable("API_Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            passwordHash = new byte[] { 110, 168, 30, 28, 251, 168, 150, 188, 132, 27, 141, 111, 220, 214, 168, 189, 212, 100, 104, 105, 249, 244, 233, 36, 170, 137, 77, 182, 28, 159, 83, 88, 107, 229, 110, 188, 193, 48, 161, 45, 239, 195, 238, 18, 190, 204, 17, 105, 67, 149, 239, 66, 191, 76, 46, 129, 135, 93, 177, 139, 59, 18, 28, 19 },
                            passwordSalt = new byte[] { 146, 225, 32, 237, 255, 12, 9, 78, 75, 232, 181, 124, 241, 233, 27, 121, 168, 185, 144, 36, 132, 147, 255, 13, 189, 23, 30, 181, 107, 25, 251, 34, 205, 84, 172, 184, 37, 146, 144, 99, 184, 208, 58, 214, 44, 178, 250, 60, 8, 241, 163, 176, 142, 27, 240, 138, 222, 223, 115, 6, 52, 28, 221, 197, 111, 240, 209, 0, 150, 255, 80, 241, 99, 30, 154, 21, 22, 178, 228, 26, 128, 212, 86, 96, 87, 23, 63, 121, 200, 222, 199, 164, 176, 184, 208, 15, 160, 55, 153, 136, 100, 83, 103, 182, 200, 155, 249, 53, 249, 208, 113, 163, 104, 154, 10, 177, 191, 119, 189, 184, 207, 216, 87, 233, 252, 217, 145, 150 },
                            userAccessLevelid = 1,
                            username = "prem"
                        },
                        new
                        {
                            id = 2,
                            passwordHash = new byte[] { 16, 167, 91, 255, 252, 22, 226, 102, 132, 29, 178, 10, 131, 120, 36, 171, 52, 138, 123, 4, 129, 155, 231, 167, 30, 176, 61, 230, 40, 111, 183, 196, 153, 112, 223, 194, 73, 19, 198, 45, 4, 216, 109, 75, 163, 44, 95, 116, 121, 75, 90, 115, 189, 30, 58, 137, 125, 138, 201, 197, 156, 241, 178, 71 },
                            passwordSalt = new byte[] { 78, 206, 111, 238, 114, 221, 146, 4, 151, 42, 216, 148, 197, 201, 183, 186, 154, 190, 180, 62, 194, 37, 84, 220, 222, 210, 249, 161, 139, 15, 251, 23, 150, 151, 193, 242, 180, 20, 167, 113, 189, 191, 15, 167, 39, 253, 205, 247, 22, 11, 73, 92, 30, 220, 241, 214, 24, 55, 118, 252, 218, 163, 64, 123, 108, 73, 155, 86, 25, 87, 207, 183, 125, 242, 194, 59, 177, 38, 116, 168, 254, 225, 27, 61, 232, 2, 62, 253, 33, 101, 131, 108, 241, 49, 188, 196, 83, 91, 138, 146, 197, 7, 107, 138, 107, 50, 39, 5, 248, 50, 249, 82, 153, 49, 154, 158, 195, 46, 225, 71, 79, 196, 4, 170, 6, 64, 1, 81 },
                            userAccessLevelid = 1,
                            username = "superadmin"
                        },
                        new
                        {
                            id = 3,
                            passwordHash = new byte[] { 100, 42, 94, 129, 19, 219, 88, 122, 199, 107, 170, 145, 78, 237, 226, 126, 210, 194, 186, 152, 228, 229, 199, 51, 145, 165, 121, 172, 128, 11, 57, 235, 69, 94, 159, 155, 249, 180, 102, 88, 111, 193, 115, 7, 52, 211, 82, 85, 86, 223, 17, 45, 150, 38, 58, 119, 113, 106, 100, 181, 149, 141, 242, 112 },
                            passwordSalt = new byte[] { 236, 22, 21, 49, 216, 77, 29, 187, 229, 48, 110, 80, 98, 32, 34, 138, 248, 230, 141, 55, 96, 46, 32, 108, 84, 174, 230, 243, 238, 242, 59, 42, 109, 116, 152, 227, 123, 116, 136, 187, 14, 108, 92, 109, 56, 215, 154, 31, 231, 105, 45, 195, 114, 203, 120, 98, 199, 14, 202, 55, 107, 190, 157, 75, 83, 196, 170, 128, 208, 87, 250, 124, 155, 40, 44, 1, 219, 131, 87, 78, 178, 233, 132, 43, 196, 129, 102, 170, 17, 108, 199, 251, 54, 20, 229, 31, 174, 139, 237, 170, 107, 6, 228, 31, 27, 216, 184, 3, 249, 128, 99, 14, 217, 15, 18, 253, 236, 76, 255, 129, 17, 30, 2, 19, 67, 47, 1, 137 },
                            userAccessLevelid = 2,
                            username = "admin"
                        },
                        new
                        {
                            id = 4,
                            passwordHash = new byte[] { 54, 30, 142, 192, 155, 185, 160, 168, 179, 23, 139, 77, 215, 226, 204, 182, 156, 137, 188, 45, 18, 10, 239, 208, 1, 207, 219, 58, 147, 153, 197, 143, 119, 196, 107, 115, 148, 249, 224, 216, 241, 55, 234, 243, 96, 243, 35, 38, 190, 82, 202, 52, 16, 52, 175, 108, 223, 197, 215, 93, 220, 65, 148, 98 },
                            passwordSalt = new byte[] { 227, 131, 118, 82, 83, 40, 72, 10, 82, 254, 117, 25, 192, 97, 165, 219, 44, 128, 157, 65, 236, 44, 74, 53, 252, 162, 95, 1, 19, 90, 97, 59, 212, 166, 105, 24, 228, 29, 177, 81, 223, 226, 153, 66, 244, 232, 165, 110, 119, 72, 121, 93, 142, 26, 196, 40, 101, 246, 153, 191, 151, 21, 58, 64, 238, 237, 97, 21, 248, 169, 45, 57, 104, 49, 204, 102, 6, 162, 203, 131, 240, 16, 175, 71, 172, 129, 41, 8, 142, 58, 42, 86, 253, 40, 100, 84, 17, 183, 125, 37, 172, 168, 174, 146, 98, 237, 43, 194, 57, 242, 4, 106, 8, 241, 42, 249, 108, 87, 12, 246, 78, 227, 219, 251, 134, 226, 145, 79 },
                            userAccessLevelid = 3,
                            username = "user"
                        },
                        new
                        {
                            id = 5,
                            passwordHash = new byte[] { 41, 8, 230, 179, 74, 82, 166, 144, 8, 69, 115, 217, 161, 100, 246, 73, 221, 249, 85, 129, 249, 17, 151, 116, 43, 49, 92, 183, 175, 4, 5, 31, 125, 108, 112, 142, 89, 77, 243, 94, 191, 81, 91, 208, 203, 87, 13, 12, 173, 220, 10, 106, 65, 92, 28, 253, 73, 2, 195, 236, 21, 183, 45, 38 },
                            passwordSalt = new byte[] { 39, 112, 189, 219, 106, 96, 219, 60, 179, 222, 213, 132, 190, 254, 53, 139, 211, 142, 179, 31, 83, 20, 49, 113, 160, 26, 135, 24, 55, 18, 118, 191, 184, 90, 26, 250, 38, 190, 36, 28, 22, 248, 10, 173, 68, 52, 119, 49, 72, 189, 172, 112, 229, 203, 242, 95, 63, 127, 243, 239, 109, 242, 103, 236, 248, 42, 172, 85, 59, 15, 223, 62, 204, 82, 88, 70, 190, 127, 138, 167, 115, 236, 118, 164, 248, 160, 96, 203, 69, 168, 73, 142, 120, 86, 26, 251, 8, 55, 229, 43, 17, 6, 37, 147, 76, 156, 189, 148, 219, 169, 30, 142, 242, 22, 162, 207, 51, 243, 213, 210, 194, 52, 226, 46, 234, 104, 149, 74 },
                            userAccessLevelid = 4,
                            username = "guest"
                        },
                        new
                        {
                            id = 6,
                            passwordHash = new byte[] { 170, 254, 168, 193, 33, 31, 204, 54, 85, 191, 159, 69, 235, 51, 217, 44, 98, 4, 53, 73, 13, 203, 100, 122, 125, 126, 185, 17, 229, 236, 92, 194, 212, 9, 209, 121, 0, 229, 30, 213, 195, 126, 14, 188, 88, 25, 99, 136, 151, 46, 178, 143, 68, 16, 65, 246, 124, 248, 150, 219, 88, 150, 44, 243 },
                            passwordSalt = new byte[] { 94, 89, 45, 51, 87, 14, 102, 248, 170, 135, 176, 113, 85, 103, 170, 151, 36, 46, 80, 41, 220, 209, 246, 168, 36, 142, 209, 169, 253, 71, 95, 72, 208, 204, 36, 207, 49, 244, 187, 207, 19, 196, 243, 71, 180, 24, 98, 245, 72, 208, 80, 153, 186, 179, 91, 188, 37, 49, 101, 213, 189, 126, 22, 209, 127, 252, 28, 185, 52, 174, 194, 46, 39, 32, 56, 177, 14, 64, 2, 235, 104, 48, 9, 236, 83, 76, 238, 243, 138, 206, 198, 53, 43, 35, 107, 20, 76, 72, 139, 123, 65, 144, 214, 206, 243, 43, 170, 217, 33, 251, 157, 208, 81, 33, 43, 99, 0, 139, 151, 220, 4, 122, 94, 154, 177, 94, 0, 163 },
                            userAccessLevelid = 99,
                            username = "unknow"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accessLevel")
                        .HasColumnType("int");

                    b.Property<string>("accessLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_UserAccessLevel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            accessLevel = 1,
                            accessLevelName = "SuperAdmin"
                        },
                        new
                        {
                            id = 2,
                            accessLevel = 2,
                            accessLevelName = "Admin"
                        },
                        new
                        {
                            id = 3,
                            accessLevel = 3,
                            accessLevelName = "User"
                        },
                        new
                        {
                            id = 4,
                            accessLevel = 4,
                            accessLevelName = "Guest"
                        },
                        new
                        {
                            id = 99,
                            accessLevel = 99,
                            accessLevelName = "Unknown"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "uploadPathData")
                        .WithMany()
                        .HasForeignKey("uploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("uploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "sectionUploadPathData")
                        .WithMany()
                        .HasForeignKey("sectionUploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", "userAccessLevels")
                        .WithMany()
                        .HasForeignKey("userAccessLevelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccessLevels");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoGallery_BackeEnd.Context;

#nullable disable

namespace PhotoGallery_BackEnd.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20231106051916_changeColumnSectionUploadData")]
    partial class changeColumnSectionUploadData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("basePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sizeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("API_SectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("taskid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("uploadPathDataid");

                    b.ToTable("API_TaskModel");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("sectionUploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sectionUploadPathDataid");

                    b.ToTable("API_TaskOrderData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskReviewData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("extractData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractEndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractSta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isRunning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("task_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_TaskReviewData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.LoginTimming", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("expireToken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_LoginTimming");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("userAccessLevelid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("userAccessLevelid");

                    b.ToTable("API_Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            passwordHash = new byte[] { 151, 143, 86, 3, 162, 80, 251, 177, 169, 204, 174, 215, 206, 105, 155, 218, 209, 147, 19, 208, 126, 93, 191, 52, 163, 191, 62, 216, 18, 43, 111, 68, 224, 204, 111, 44, 234, 228, 4, 16, 37, 80, 151, 98, 92, 114, 157, 115, 52, 186, 86, 136, 15, 82, 110, 251, 12, 192, 145, 174, 71, 6, 152, 69 },
                            passwordSalt = new byte[] { 99, 147, 113, 183, 132, 61, 30, 199, 66, 24, 111, 247, 32, 79, 24, 166, 208, 243, 22, 178, 124, 229, 166, 20, 103, 47, 15, 186, 72, 30, 201, 124, 121, 104, 232, 234, 239, 123, 89, 191, 155, 50, 233, 252, 109, 102, 121, 193, 139, 43, 227, 237, 77, 189, 162, 145, 247, 233, 94, 198, 18, 93, 45, 86, 95, 246, 235, 36, 124, 73, 231, 112, 160, 251, 81, 254, 129, 24, 15, 28, 251, 201, 169, 23, 120, 43, 113, 242, 175, 55, 106, 195, 176, 104, 254, 161, 229, 31, 182, 23, 98, 216, 98, 111, 88, 110, 91, 209, 128, 52, 114, 166, 26, 13, 111, 54, 252, 248, 251, 151, 101, 57, 127, 88, 153, 198, 9, 85 },
                            userAccessLevelid = 1,
                            username = "prem"
                        },
                        new
                        {
                            id = 2,
                            passwordHash = new byte[] { 236, 156, 215, 53, 163, 139, 3, 50, 244, 127, 217, 219, 54, 230, 91, 252, 238, 239, 15, 164, 106, 140, 246, 129, 126, 5, 116, 238, 186, 10, 216, 211, 156, 195, 172, 183, 190, 76, 170, 164, 173, 0, 164, 76, 239, 183, 178, 144, 154, 57, 194, 247, 32, 136, 251, 124, 2, 59, 8, 28, 21, 67, 156, 120 },
                            passwordSalt = new byte[] { 49, 92, 245, 8, 178, 178, 243, 222, 168, 95, 185, 209, 179, 161, 16, 190, 50, 201, 230, 174, 157, 105, 241, 131, 231, 139, 206, 207, 153, 140, 73, 61, 183, 101, 94, 73, 128, 64, 215, 5, 162, 183, 213, 89, 160, 205, 92, 14, 52, 56, 35, 126, 105, 168, 34, 90, 229, 31, 161, 155, 110, 162, 107, 43, 61, 17, 101, 122, 227, 3, 164, 7, 13, 179, 139, 241, 125, 174, 122, 136, 20, 67, 23, 146, 56, 248, 70, 14, 110, 236, 57, 104, 152, 42, 210, 214, 133, 110, 69, 9, 48, 34, 65, 83, 250, 15, 162, 28, 242, 215, 141, 221, 74, 158, 50, 75, 68, 120, 80, 228, 66, 84, 244, 168, 31, 236, 24, 2 },
                            userAccessLevelid = 1,
                            username = "superadmin"
                        },
                        new
                        {
                            id = 3,
                            passwordHash = new byte[] { 254, 161, 133, 219, 87, 120, 183, 111, 1, 100, 219, 231, 247, 152, 67, 67, 135, 95, 160, 186, 45, 198, 47, 42, 23, 98, 146, 135, 112, 222, 92, 151, 180, 202, 187, 90, 6, 183, 186, 192, 52, 189, 106, 56, 192, 88, 19, 91, 145, 128, 228, 142, 56, 131, 185, 189, 190, 102, 46, 199, 0, 176, 224, 238 },
                            passwordSalt = new byte[] { 223, 224, 130, 9, 85, 226, 132, 25, 54, 105, 232, 15, 97, 62, 116, 159, 122, 191, 176, 167, 1, 124, 243, 185, 190, 227, 103, 134, 211, 230, 254, 3, 255, 137, 89, 224, 57, 162, 93, 37, 209, 142, 179, 68, 241, 72, 122, 43, 26, 142, 88, 38, 36, 244, 155, 254, 60, 148, 91, 6, 239, 94, 236, 225, 216, 46, 47, 248, 169, 223, 153, 50, 226, 61, 215, 135, 101, 215, 99, 165, 179, 61, 98, 10, 158, 227, 112, 166, 167, 102, 44, 50, 34, 197, 27, 114, 144, 37, 248, 2, 243, 111, 16, 165, 39, 195, 98, 77, 90, 97, 217, 125, 132, 152, 92, 80, 12, 156, 189, 235, 108, 195, 79, 113, 225, 88, 19, 29 },
                            userAccessLevelid = 2,
                            username = "admin"
                        },
                        new
                        {
                            id = 4,
                            passwordHash = new byte[] { 200, 243, 170, 49, 51, 246, 113, 214, 111, 6, 36, 53, 88, 129, 219, 4, 77, 43, 15, 64, 205, 125, 215, 151, 201, 164, 31, 206, 227, 231, 218, 164, 130, 255, 6, 80, 136, 19, 75, 82, 153, 65, 67, 208, 49, 1, 159, 55, 193, 232, 74, 7, 228, 66, 236, 106, 160, 39, 36, 139, 180, 150, 120, 53 },
                            passwordSalt = new byte[] { 77, 8, 88, 212, 56, 157, 51, 61, 82, 1, 81, 5, 72, 158, 76, 202, 16, 33, 46, 15, 39, 21, 252, 211, 14, 155, 159, 169, 194, 241, 194, 55, 115, 21, 188, 49, 107, 71, 53, 31, 179, 49, 75, 122, 164, 167, 200, 170, 145, 126, 181, 34, 109, 153, 25, 203, 160, 118, 150, 186, 51, 221, 82, 155, 43, 112, 112, 8, 242, 103, 104, 203, 150, 127, 249, 127, 31, 145, 244, 185, 12, 85, 239, 71, 117, 201, 228, 1, 29, 0, 23, 174, 74, 142, 69, 67, 164, 236, 62, 72, 244, 218, 240, 86, 253, 25, 219, 255, 0, 60, 116, 89, 131, 4, 34, 108, 194, 49, 155, 131, 244, 86, 17, 153, 184, 125, 116, 208 },
                            userAccessLevelid = 3,
                            username = "user"
                        },
                        new
                        {
                            id = 5,
                            passwordHash = new byte[] { 166, 76, 22, 162, 176, 199, 180, 230, 115, 86, 157, 133, 22, 91, 61, 215, 124, 38, 250, 62, 66, 82, 4, 210, 158, 252, 29, 153, 32, 40, 3, 88, 71, 114, 27, 81, 31, 255, 226, 147, 177, 206, 229, 108, 182, 4, 1, 96, 242, 2, 77, 129, 48, 243, 42, 97, 4, 38, 157, 92, 48, 89, 145, 212 },
                            passwordSalt = new byte[] { 175, 223, 125, 250, 117, 229, 162, 144, 221, 240, 10, 62, 67, 12, 6, 32, 85, 227, 177, 134, 105, 249, 106, 162, 77, 87, 103, 133, 139, 230, 62, 231, 84, 82, 29, 184, 59, 56, 94, 206, 167, 135, 116, 61, 43, 224, 170, 113, 75, 88, 122, 48, 250, 132, 227, 204, 220, 113, 26, 128, 168, 225, 157, 61, 182, 5, 251, 219, 17, 236, 96, 139, 32, 247, 187, 7, 221, 175, 25, 32, 72, 196, 166, 16, 29, 84, 70, 114, 76, 217, 164, 132, 156, 16, 182, 192, 117, 41, 16, 164, 48, 212, 112, 114, 69, 121, 110, 206, 8, 211, 157, 155, 224, 224, 103, 142, 78, 125, 199, 227, 129, 144, 122, 140, 30, 250, 230, 241 },
                            userAccessLevelid = 4,
                            username = "guest"
                        },
                        new
                        {
                            id = 6,
                            passwordHash = new byte[] { 9, 139, 54, 53, 179, 160, 42, 176, 121, 79, 157, 126, 138, 43, 112, 169, 212, 40, 66, 41, 106, 52, 33, 34, 122, 5, 20, 50, 157, 228, 151, 218, 102, 170, 59, 108, 74, 224, 129, 96, 134, 157, 96, 213, 148, 109, 7, 76, 58, 39, 138, 247, 190, 76, 78, 63, 145, 203, 131, 27, 116, 217, 87, 142 },
                            passwordSalt = new byte[] { 238, 237, 164, 124, 57, 46, 144, 160, 22, 162, 134, 38, 8, 57, 191, 142, 36, 13, 19, 2, 21, 10, 145, 125, 37, 47, 17, 188, 26, 62, 78, 76, 19, 188, 118, 81, 211, 48, 139, 159, 220, 61, 75, 194, 65, 60, 183, 142, 94, 103, 118, 136, 212, 104, 180, 94, 94, 123, 193, 241, 64, 210, 36, 22, 245, 158, 106, 234, 141, 223, 176, 223, 140, 199, 197, 38, 241, 42, 28, 123, 4, 211, 197, 46, 232, 19, 203, 56, 113, 84, 14, 183, 141, 121, 75, 7, 248, 143, 220, 116, 52, 105, 43, 194, 136, 56, 203, 227, 245, 134, 233, 76, 219, 51, 204, 95, 206, 153, 250, 163, 128, 72, 20, 178, 108, 77, 245, 66 },
                            userAccessLevelid = 99,
                            username = "unknow"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accessLevel")
                        .HasColumnType("int");

                    b.Property<string>("accessLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_UserAccessLevel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            accessLevel = 1,
                            accessLevelName = "SuperAdmin"
                        },
                        new
                        {
                            id = 2,
                            accessLevel = 2,
                            accessLevelName = "Admin"
                        },
                        new
                        {
                            id = 3,
                            accessLevel = 3,
                            accessLevelName = "User"
                        },
                        new
                        {
                            id = 4,
                            accessLevel = 4,
                            accessLevelName = "Guest"
                        },
                        new
                        {
                            id = 99,
                            accessLevel = 99,
                            accessLevelName = "Unknown"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "uploadPathData")
                        .WithMany()
                        .HasForeignKey("uploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("uploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "sectionUploadPathData")
                        .WithMany()
                        .HasForeignKey("sectionUploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", "userAccessLevels")
                        .WithMany()
                        .HasForeignKey("userAccessLevelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccessLevels");
                });
#pragma warning restore 612, 618
        }
    }
}

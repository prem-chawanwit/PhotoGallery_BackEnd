// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoGallery_BackeEnd.Context;

#nullable disable

namespace PhotoGallery_BackEnd.Migrations
{
    [DbContext(typeof(TaskDbContext))]
    partial class TaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("basePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("API_SectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("taskid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("uploadPathDataid");

                    b.ToTable("API_TaskModel");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("sectionUploadPathDataid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sectionUploadPathDataid");

                    b.ToTable("API_TaskOrderData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskReviewData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("extractData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractEndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractSta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extractStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isRunning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("task_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_TaskReviewData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("userAccessLevelid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("userAccessLevelid");

                    b.ToTable("API_Users");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accessLevel")
                        .HasColumnType("int");

                    b.Property<string>("accessLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("API_UserAccessLevel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            accessLevel = 1,
                            accessLevelName = "SuperAdmin"
                        },
                        new
                        {
                            id = 2,
                            accessLevel = 2,
                            accessLevelName = "Admin"
                        },
                        new
                        {
                            id = 3,
                            accessLevel = 3,
                            accessLevelName = "User"
                        },
                        new
                        {
                            id = 4,
                            accessLevel = 4,
                            accessLevelName = "Guest"
                        },
                        new
                        {
                            id = 99,
                            accessLevel = 99,
                            accessLevelName = "Unknown"
                        });
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskModel", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "uploadPathData")
                        .WithMany()
                        .HasForeignKey("uploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("uploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Tasks.TaskOrderData", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Tasks.SectionUploadPathData", "sectionUploadPathData")
                        .WithMany()
                        .HasForeignKey("sectionUploadPathDataid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sectionUploadPathData");
                });

            modelBuilder.Entity("PhotoGallery_BackEnd.Models.Users.User", b =>
                {
                    b.HasOne("PhotoGallery_BackEnd.Models.Users.UserAccessLevel", "userAccessLevels")
                        .WithMany()
                        .HasForeignKey("userAccessLevelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccessLevels");
                });
#pragma warning restore 612, 618
        }
    }
}
